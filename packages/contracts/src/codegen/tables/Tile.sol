// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct TileData {
  uint8 tileType;
  uint32 unitId;
  address playerId;
}

library Tile {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "Tile", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462000000000000000000000000000054696c65000000000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0019030001041400000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint32, uint32, uint32)
  Schema constant _keySchema = Schema.wrap(0x000c030003030300000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, uint32, address)
  Schema constant _valueSchema = Schema.wrap(0x0019030000036100000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](3);
    keyNames[0] = "matchId";
    keyNames[1] = "x";
    keyNames[2] = "y";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](3);
    fieldNames[0] = "tileType";
    fieldNames[1] = "unitId";
    fieldNames[2] = "playerId";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get tileType.
   */
  function getTileType(uint32 matchId, uint32 x, uint32 y) internal view returns (uint8 tileType) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(matchId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get tileType.
   */
  function _getTileType(uint32 matchId, uint32 x, uint32 y) internal view returns (uint8 tileType) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(matchId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set tileType.
   */
  function setTileType(uint32 matchId, uint32 x, uint32 y, uint8 tileType) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(matchId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((tileType)), _fieldLayout);
  }

  /**
   * @notice Set tileType.
   */
  function _setTileType(uint32 matchId, uint32 x, uint32 y, uint8 tileType) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(matchId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((tileType)), _fieldLayout);
  }

  /**
   * @notice Get unitId.
   */
  function getUnitId(uint32 matchId, uint32 x, uint32 y) internal view returns (uint32 unitId) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(matchId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get unitId.
   */
  function _getUnitId(uint32 matchId, uint32 x, uint32 y) internal view returns (uint32 unitId) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(matchId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set unitId.
   */
  function setUnitId(uint32 matchId, uint32 x, uint32 y, uint32 unitId) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(matchId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((unitId)), _fieldLayout);
  }

  /**
   * @notice Set unitId.
   */
  function _setUnitId(uint32 matchId, uint32 x, uint32 y, uint32 unitId) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(matchId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((unitId)), _fieldLayout);
  }

  /**
   * @notice Get playerId.
   */
  function getPlayerId(uint32 matchId, uint32 x, uint32 y) internal view returns (address playerId) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(matchId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get playerId.
   */
  function _getPlayerId(uint32 matchId, uint32 x, uint32 y) internal view returns (address playerId) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(matchId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set playerId.
   */
  function setPlayerId(uint32 matchId, uint32 x, uint32 y, address playerId) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(matchId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((playerId)), _fieldLayout);
  }

  /**
   * @notice Set playerId.
   */
  function _setPlayerId(uint32 matchId, uint32 x, uint32 y, address playerId) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(matchId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((playerId)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(uint32 matchId, uint32 x, uint32 y) internal view returns (TileData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(matchId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint32 matchId, uint32 x, uint32 y) internal view returns (TileData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(matchId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(uint32 matchId, uint32 x, uint32 y, uint8 tileType, uint32 unitId, address playerId) internal {
    bytes memory _staticData = encodeStatic(tileType, unitId, playerId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(matchId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(uint32 matchId, uint32 x, uint32 y, uint8 tileType, uint32 unitId, address playerId) internal {
    bytes memory _staticData = encodeStatic(tileType, unitId, playerId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(matchId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint32 matchId, uint32 x, uint32 y, TileData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.tileType, _table.unitId, _table.playerId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(matchId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint32 matchId, uint32 x, uint32 y, TileData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.tileType, _table.unitId, _table.playerId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(matchId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(bytes memory _blob) internal pure returns (uint8 tileType, uint32 unitId, address playerId) {
    tileType = (uint8(Bytes.getBytes1(_blob, 0)));

    unitId = (uint32(Bytes.getBytes4(_blob, 1)));

    playerId = (address(Bytes.getBytes20(_blob, 5)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (TileData memory _table) {
    (_table.tileType, _table.unitId, _table.playerId) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint32 matchId, uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(matchId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint32 matchId, uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(matchId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(uint8 tileType, uint32 unitId, address playerId) internal pure returns (bytes memory) {
    return abi.encodePacked(tileType, unitId, playerId);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint8 tileType,
    uint32 unitId,
    address playerId
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(tileType, unitId, playerId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint32 matchId, uint32 x, uint32 y) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(matchId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    return _keyTuple;
  }
}
